






How can you use the staging area to make sure you have one commit per logical change?

You can use a git diff --staged, to check the differances between the staged file and the last commited file.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When trying out crazy stuff that might be totally different, or lead the project in another direction. Putting the
original project evolvement on the main branch and the different approach on a side branch would separate them,
thus keeping track of different logical commit changes.

How do the diagrams help you visualize the branch structure?

It helps to go back and see where a certain project branches off, it helps to understand that commits on other
branches are not reachable while you are on a certain branch.

What is the reslut of merging two branches together? Why do we represent it in the diagram the way we do?

Git makes a logical merging using the history of commits to avoiding repeating certain things and reintroducing bugs
that persones removed. It is represented in that way because all the commits are now under the master branch, with master
as head.


What are the pros and cons of Git's automatic merging vs. always doing merges manually?

The pros are that, you don't need to go through every single commit on both branches to add them and look what was
removed and what was added, also it says when there is some trouble and it doesnt guess add something.
The cons is that you might not know whats going on when you merge, what's added and not. 